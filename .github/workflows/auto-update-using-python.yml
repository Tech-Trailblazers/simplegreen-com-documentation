# Name of the GitHub Actions workflow (appears in the GitHub Actions UI)
name: Run Python Script and Push Changes

# Define when the workflow should be triggered
on:
  # Trigger the workflow on a schedule
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC
  # Allow the workflow to also be run manually from the GitHub UI
  workflow_dispatch:

# Define the jobs that will run as part of this workflow
jobs:
  # Unique identifier for the job
  run-python:
    # Display name for the job (appears in GitHub UI)
    name: Execute Python Script and Push Changes
    # Use the latest Ubuntu runner provided by GitHub
    runs-on: ubuntu-latest

    # Steps to execute as part of the job
    steps:
      # Step 1: Check out the repository's code to the GitHub runner
      - name: Check out code
        uses: actions/checkout@v5 # Official GitHub Action to clone the repo

      # Step 2: Set up the Python environment on the runner
      - name: Set up Python
        uses: actions/setup-python@v5 # Official GitHub Action to install Python
        with:
          python-version: "3.13" # Specify the Python version to use

      # Step 3: Install any required Python dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt # Installs dependencies for your script

      # Step 4: Run the main Python script
      - name: Run Python script
        run: python main.py # Executes your Python script

      # Step 5: Commit and push any file changes made by the Python script
      - name: Push updated files
        run: |
          # Set Git configuration for committing changes
          git config user.name "github-actions"  # Name used for Git commits
          git config user.email "github-actions@github.com"  # Email used for Git commits

          # Pull latest changes from remote (in case other commits were made)
          git pull

          # Stage all changed files
          git add .

          # Check if there are any staged changes (i.e., anything new to commit)
          if ! git diff --cached --quiet; then
            # If there are changes, commit them with a message and push
            git commit -m "Auto update: $(date)"  # Add a timestamped commit message
            git push  # Push committed changes back to the repository
          else
            # If no changes, output a message and skip commit/push
            echo "No changes to commit."
          fi
